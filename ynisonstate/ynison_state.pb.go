// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: ynisonstate/ynison_state.proto

package ynisonstate

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PutYnisonStateRequest_ActivityInterceptionType int32

const (
	// Устройство, отправившее сообщение, не пытается перехватить активность.
	PutYnisonStateRequest_DO_NOT_INTERCEPT_BY_DEFAULT PutYnisonStateRequest_ActivityInterceptionType = 0
	// Устройство, отправившее сообщение, становится активным,
	// если на момент обработки сообщения активное устройство отсутствует.
	PutYnisonStateRequest_INTERCEPT_IF_NO_ONE_ACTIVE PutYnisonStateRequest_ActivityInterceptionType = 1
	// Устройство, отправившее сообщение, получает активность после успешной обработки сообщения.
	PutYnisonStateRequest_INTERCEPT_EAGER PutYnisonStateRequest_ActivityInterceptionType = 2
)

// Enum value maps for PutYnisonStateRequest_ActivityInterceptionType.
var (
	PutYnisonStateRequest_ActivityInterceptionType_name = map[int32]string{
		0: "DO_NOT_INTERCEPT_BY_DEFAULT",
		1: "INTERCEPT_IF_NO_ONE_ACTIVE",
		2: "INTERCEPT_EAGER",
	}
	PutYnisonStateRequest_ActivityInterceptionType_value = map[string]int32{
		"DO_NOT_INTERCEPT_BY_DEFAULT": 0,
		"INTERCEPT_IF_NO_ONE_ACTIVE":  1,
		"INTERCEPT_EAGER":             2,
	}
)

func (x PutYnisonStateRequest_ActivityInterceptionType) Enum() *PutYnisonStateRequest_ActivityInterceptionType {
	p := new(PutYnisonStateRequest_ActivityInterceptionType)
	*p = x
	return p
}

func (x PutYnisonStateRequest_ActivityInterceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PutYnisonStateRequest_ActivityInterceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ynisonstate_ynison_state_proto_enumTypes[0].Descriptor()
}

func (PutYnisonStateRequest_ActivityInterceptionType) Type() protoreflect.EnumType {
	return &file_ynisonstate_ynison_state_proto_enumTypes[0]
}

func (x PutYnisonStateRequest_ActivityInterceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PutYnisonStateRequest_ActivityInterceptionType.Descriptor instead.
func (PutYnisonStateRequest_ActivityInterceptionType) EnumDescriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{0, 0}
}

// Сообщение с обновленным состоянием.
// Клиент отправляет на сервер один из параметров в зависимости
// от произошедшего события.
type PutYnisonStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*PutYnisonStateRequest_UpdateFullState
	//	*PutYnisonStateRequest_UpdateActiveDevice
	//	*PutYnisonStateRequest_UpdatePlayingStatus
	//	*PutYnisonStateRequest_UpdatePlayerState
	//	*PutYnisonStateRequest_UpdateVolume
	//	*PutYnisonStateRequest_UpdatePlayerQueueInject
	//	*PutYnisonStateRequest_UpdateSessionParams
	//	*PutYnisonStateRequest_UpdateVolumeInfo
	//	*PutYnisonStateRequest_SyncStateFromEov
	Parameters isPutYnisonStateRequest_Parameters `protobuf_oneof:"parameters"`
	// Время последнего изменения в плеере в миллисекундах.
	PlayerActionTimestampMs int64 `protobuf:"varint,7,opt,name=player_action_timestamp_ms,json=playerActionTimestampMs,proto3" json:"player_action_timestamp_ms,omitempty"`
	// Request id. Генерируется клиентом, используется для логирования и отладки
	Rid string `protobuf:"bytes,8,opt,name=rid,proto3" json:"rid,omitempty"`
	// Определяет тактику перехвата активности устройством отправившим сообщение.
	ActivityInterceptionType PutYnisonStateRequest_ActivityInterceptionType `protobuf:"varint,10,opt,name=activity_interception_type,json=activityInterceptionType,proto3,enum=ynison_state.PutYnisonStateRequest_ActivityInterceptionType" json:"activity_interception_type,omitempty"`
}

func (x *PutYnisonStateRequest) Reset() {
	*x = PutYnisonStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutYnisonStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutYnisonStateRequest) ProtoMessage() {}

func (x *PutYnisonStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutYnisonStateRequest.ProtoReflect.Descriptor instead.
func (*PutYnisonStateRequest) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{0}
}

func (m *PutYnisonStateRequest) GetParameters() isPutYnisonStateRequest_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdateFullState() *UpdateFullState {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdateFullState); ok {
		return x.UpdateFullState
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdateActiveDevice() *UpdateActiveDevice {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdateActiveDevice); ok {
		return x.UpdateActiveDevice
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdatePlayingStatus() *UpdatePlayingStatus {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdatePlayingStatus); ok {
		return x.UpdatePlayingStatus
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdatePlayerState() *UpdatePlayerState {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdatePlayerState); ok {
		return x.UpdatePlayerState
	}
	return nil
}

// Deprecated: Do not use.
func (x *PutYnisonStateRequest) GetUpdateVolume() *UpdateVolume {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdateVolume); ok {
		return x.UpdateVolume
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdatePlayerQueueInject() *UpdatePlayerQueueInject {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdatePlayerQueueInject); ok {
		return x.UpdatePlayerQueueInject
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdateSessionParams() *UpdateSessionParams {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdateSessionParams); ok {
		return x.UpdateSessionParams
	}
	return nil
}

func (x *PutYnisonStateRequest) GetUpdateVolumeInfo() *UpdateVolumeInfo {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_UpdateVolumeInfo); ok {
		return x.UpdateVolumeInfo
	}
	return nil
}

func (x *PutYnisonStateRequest) GetSyncStateFromEov() *SyncStateFromEOV {
	if x, ok := x.GetParameters().(*PutYnisonStateRequest_SyncStateFromEov); ok {
		return x.SyncStateFromEov
	}
	return nil
}

func (x *PutYnisonStateRequest) GetPlayerActionTimestampMs() int64 {
	if x != nil {
		return x.PlayerActionTimestampMs
	}
	return 0
}

func (x *PutYnisonStateRequest) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *PutYnisonStateRequest) GetActivityInterceptionType() PutYnisonStateRequest_ActivityInterceptionType {
	if x != nil {
		return x.ActivityInterceptionType
	}
	return PutYnisonStateRequest_DO_NOT_INTERCEPT_BY_DEFAULT
}

type isPutYnisonStateRequest_Parameters interface {
	isPutYnisonStateRequest_Parameters()
}

type PutYnisonStateRequest_UpdateFullState struct {
	// Обновить общее состояние.
	UpdateFullState *UpdateFullState `protobuf:"bytes,1,opt,name=update_full_state,json=updateFullState,proto3,oneof"`
}

type PutYnisonStateRequest_UpdateActiveDevice struct {
	// Обновить активное устройство.
	UpdateActiveDevice *UpdateActiveDevice `protobuf:"bytes,2,opt,name=update_active_device,json=updateActiveDevice,proto3,oneof"`
}

type PutYnisonStateRequest_UpdatePlayingStatus struct {
	// Обновить статус воспроизведения.
	UpdatePlayingStatus *UpdatePlayingStatus `protobuf:"bytes,3,opt,name=update_playing_status,json=updatePlayingStatus,proto3,oneof"`
}

type PutYnisonStateRequest_UpdatePlayerState struct {
	// Обновить состояние плеера.
	UpdatePlayerState *UpdatePlayerState `protobuf:"bytes,4,opt,name=update_player_state,json=updatePlayerState,proto3,oneof"`
}

type PutYnisonStateRequest_UpdateVolume struct {
	// Обновить громкость. Устаревшее значение, смотри [update_volume_info].
	//
	// Deprecated: Do not use.
	UpdateVolume *UpdateVolume `protobuf:"bytes,5,opt,name=update_volume,json=updateVolume,proto3,oneof"`
}

type PutYnisonStateRequest_UpdatePlayerQueueInject struct {
	// Обновить состояние проигрывания ижектируемой в очередь сущности.
	UpdatePlayerQueueInject *UpdatePlayerQueueInject `protobuf:"bytes,6,opt,name=update_player_queue_inject,json=updatePlayerQueueInject,proto3,oneof"`
}

type PutYnisonStateRequest_UpdateSessionParams struct {
	// Обновить информацию об устройстве отправившем информацию.
	UpdateSessionParams *UpdateSessionParams `protobuf:"bytes,9,opt,name=update_session_params,json=updateSessionParams,proto3,oneof"`
}

type PutYnisonStateRequest_UpdateVolumeInfo struct {
	// Обновить громкость.
	UpdateVolumeInfo *UpdateVolumeInfo `protobuf:"bytes,11,opt,name=update_volume_info,json=updateVolumeInfo,proto3,oneof"`
}

type PutYnisonStateRequest_SyncStateFromEov struct {
	// Запросить синхронизацию с сервисом ЕОВ.
	SyncStateFromEov *SyncStateFromEOV `protobuf:"bytes,12,opt,name=sync_state_from_eov,json=syncStateFromEov,proto3,oneof"`
}

func (*PutYnisonStateRequest_UpdateFullState) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdateActiveDevice) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdatePlayingStatus) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdatePlayerState) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdateVolume) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdatePlayerQueueInject) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdateSessionParams) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_UpdateVolumeInfo) isPutYnisonStateRequest_Parameters() {}

func (*PutYnisonStateRequest_SyncStateFromEov) isPutYnisonStateRequest_Parameters() {}

// Сообщение с обновленным состоянием.
//
// Сервер отправляет на клиент в следующих случаях:
// * В ответ на `PutYnisonStateRequest`, который меняет состояние на сервере.
// * Если произошло обновление на другом клиенте и его нужно транслировать всем подключенным устройствам
// (например, сменилась очередь воспроизведения).
// * Если изменился список устройств.
type PutYnisonStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Состояние плеера.
	PlayerState *PlayerState `protobuf:"bytes,1,opt,name=player_state,json=playerState,proto3" json:"player_state,omitempty"`
	// Список подключенных устройств.
	Devices []*Device `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	// Идентификатор активного устройства.
	ActiveDeviceIdOptional *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=active_device_id_optional,json=activeDeviceIdOptional,proto3" json:"active_device_id_optional,omitempty"`
	// Время создания ответа сервера в миллисекундах.
	TimestampMs int64 `protobuf:"varint,4,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// Request id. Предположительно тот, который послужил причиной отправки ответа.
	Rid string `protobuf:"bytes,5,opt,name=rid,proto3" json:"rid,omitempty"`
}

func (x *PutYnisonStateResponse) Reset() {
	*x = PutYnisonStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutYnisonStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutYnisonStateResponse) ProtoMessage() {}

func (x *PutYnisonStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutYnisonStateResponse.ProtoReflect.Descriptor instead.
func (*PutYnisonStateResponse) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{1}
}

func (x *PutYnisonStateResponse) GetPlayerState() *PlayerState {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

func (x *PutYnisonStateResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *PutYnisonStateResponse) GetActiveDeviceIdOptional() *wrapperspb.StringValue {
	if x != nil {
		return x.ActiveDeviceIdOptional
	}
	return nil
}

func (x *PutYnisonStateResponse) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *PutYnisonStateResponse) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

// Добавить состояние проигрывания ижектируемой в очередь сущности.
type UpdatePlayerQueueInject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerQueueInject *PlayerQueueInject `protobuf:"bytes,1,opt,name=player_queue_inject,json=playerQueueInject,proto3" json:"player_queue_inject,omitempty"`
}

func (x *UpdatePlayerQueueInject) Reset() {
	*x = UpdatePlayerQueueInject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlayerQueueInject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlayerQueueInject) ProtoMessage() {}

func (x *UpdatePlayerQueueInject) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlayerQueueInject.ProtoReflect.Descriptor instead.
func (*UpdatePlayerQueueInject) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePlayerQueueInject) GetPlayerQueueInject() *PlayerQueueInject {
	if x != nil {
		return x.PlayerQueueInject
	}
	return nil
}

// Обновить активное устройство.
// Отправляется при выборе пользователем устройства, которое должно проигрывать звук.
type UpdateActiveDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIdOptional *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=device_id_optional,json=deviceIdOptional,proto3" json:"device_id_optional,omitempty"`
}

func (x *UpdateActiveDevice) Reset() {
	*x = UpdateActiveDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActiveDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActiveDevice) ProtoMessage() {}

func (x *UpdateActiveDevice) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActiveDevice.ProtoReflect.Descriptor instead.
func (*UpdateActiveDevice) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateActiveDevice) GetDeviceIdOptional() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceIdOptional
	}
	return nil
}

// Обновить статус воспроизведения.
//
// Отправляется в следующих случаях:
// * Старт воспроизведения (после паузы).
// * Остановка воспроизведения/пауза (после проигрывания).
// * Перемотка.
// * Изменение скорости воспроизведения.
type UpdatePlayingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayingStatus *PlayingStatus `protobuf:"bytes,1,opt,name=playing_status,json=playingStatus,proto3" json:"playing_status,omitempty"`
}

func (x *UpdatePlayingStatus) Reset() {
	*x = UpdatePlayingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlayingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlayingStatus) ProtoMessage() {}

func (x *UpdatePlayingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlayingStatus.ProtoReflect.Descriptor instead.
func (*UpdatePlayingStatus) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePlayingStatus) GetPlayingStatus() *PlayingStatus {
	if x != nil {
		return x.PlayingStatus
	}
	return nil
}

// Обновить уровень громкости. Устаревшее сообщение, смотри [UpdateVolumeInfo].
//
// Deprecated: Do not use.
type UpdateVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Громкость. Значения в интервале [0; 1].
	Volume float64 `protobuf:"fixed64,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// device id устройства, на котором меняется громкость.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *UpdateVolume) Reset() {
	*x = UpdateVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVolume) ProtoMessage() {}

func (x *UpdateVolume) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVolume.ProtoReflect.Descriptor instead.
func (*UpdateVolume) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateVolume) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *UpdateVolume) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

// Обновить громкость устройства.
type UpdateVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device id устройства, на котором меняется громкость.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// новое значение состояния громкости с версией изменений.
	VolumeInfo *DeviceVolume `protobuf:"bytes,2,opt,name=volume_info,json=volumeInfo,proto3" json:"volume_info,omitempty"`
}

func (x *UpdateVolumeInfo) Reset() {
	*x = UpdateVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVolumeInfo) ProtoMessage() {}

func (x *UpdateVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVolumeInfo.ProtoReflect.Descriptor instead.
func (*UpdateVolumeInfo) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateVolumeInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UpdateVolumeInfo) GetVolumeInfo() *DeviceVolume {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

// Обновить состояние плеера.
//
// Отправляется в следующих случаях:
// * Старт новой очереди (плейлист, исполнитель, проч.).
// * Обновление очереди (добавление/удаление сущности из очереди).
// * Изменение режима повтора/шаффла.
type UpdatePlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Состояние проигрывания.
	PlayerState *PlayerState `protobuf:"bytes,1,opt,name=player_state,json=playerState,proto3" json:"player_state,omitempty"`
}

func (x *UpdatePlayerState) Reset() {
	*x = UpdatePlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlayerState) ProtoMessage() {}

func (x *UpdatePlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlayerState.ProtoReflect.Descriptor instead.
func (*UpdatePlayerState) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePlayerState) GetPlayerState() *PlayerState {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

// Обновить полное состояние проигрывания и устройств.
//
// Отправляется в следующих случаях:
// * Холодный старт.
// * Выключение оффлайн режима.
// * Появление сети после ее отключения.
type UpdateFullState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Состояние плеера.
	PlayerState *PlayerState `protobuf:"bytes,1,opt,name=player_state,json=playerState,proto3" json:"player_state,omitempty"`
	// Является ли устройство активным (играет звук).
	IsCurrentlyActive bool          `protobuf:"varint,2,opt,name=is_currently_active,json=isCurrentlyActive,proto3" json:"is_currently_active,omitempty"`
	Device            *UpdateDevice `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	// Запрос к серверу о необходимости синхронизации ЕОВ во время обработки сообщения [UpdateFullState].
	// Если не передан - синхронизация будет вызвана только для сценариев "холодного старта"
	// (нет очереди воспроизведения на на устройстве, ни на сервере).
	SyncStateFromEovOptional *SyncStateFromEOV `protobuf:"bytes,4,opt,name=sync_state_from_eov_optional,json=syncStateFromEovOptional,proto3" json:"sync_state_from_eov_optional,omitempty"`
}

func (x *UpdateFullState) Reset() {
	*x = UpdateFullState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFullState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFullState) ProtoMessage() {}

func (x *UpdateFullState) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFullState.ProtoReflect.Descriptor instead.
func (*UpdateFullState) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFullState) GetPlayerState() *PlayerState {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

func (x *UpdateFullState) GetIsCurrentlyActive() bool {
	if x != nil {
		return x.IsCurrentlyActive
	}
	return false
}

func (x *UpdateFullState) GetDevice() *UpdateDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateFullState) GetSyncStateFromEovOptional() *SyncStateFromEOV {
	if x != nil {
		return x.SyncStateFromEovOptional
	}
	return nil
}

// Обновить поведение сервера в отношении устройства в рамках сессии.
// Параметры сбрасываются при переподключении
type UpdateSessionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Пока устройство находится в пассивном режиме, оно не будет получать с сервера новые события.
	// Флаг сбрасывается, если текущее устройство становится активным.
	// Устройство обязательно получит сообщение о том, что стало активным.
	// Если текущее устройство активно, этот флаг не может быть быть установлен в true и будет проигнорирован.
	MuteEventsIfPassive bool `protobuf:"varint,1,opt,name=mute_events_if_passive,json=muteEventsIfPassive,proto3" json:"mute_events_if_passive,omitempty"`
}

func (x *UpdateSessionParams) Reset() {
	*x = UpdateSessionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionParams) ProtoMessage() {}

func (x *UpdateSessionParams) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionParams.ProtoReflect.Descriptor instead.
func (*UpdateSessionParams) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSessionParams) GetMuteEventsIfPassive() bool {
	if x != nil {
		return x.MuteEventsIfPassive
	}
	return false
}

// Информация об устройстве, передаваемая самим устройством на сервер для инициализации
type UpdateDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Информация об устройстве.
	Info *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// Громкость. Устарело, смотри [volume_info].
	//
	// Deprecated: Do not use.
	Volume float64 `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
	// Настройки доступности.
	Capabilities *DeviceCapabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Громкость.
	VolumeInfo *DeviceVolume `protobuf:"bytes,4,opt,name=volume_info,json=volumeInfo,proto3" json:"volume_info,omitempty"`
}

func (x *UpdateDevice) Reset() {
	*x = UpdateDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDevice) ProtoMessage() {}

func (x *UpdateDevice) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDevice.ProtoReflect.Descriptor instead.
func (*UpdateDevice) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDevice) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateDevice) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *UpdateDevice) GetCapabilities() *DeviceCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *UpdateDevice) GetVolumeInfo() *DeviceVolume {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

// Информация о запросе синхронизации с сервисом ЕОВ (единой очереди воспроизведения).
// Запрос синхронизации может быть отклонен сервером, если:
// * текущий девайс на данный момент не является активным
// * текущий девайс не получил активности в результате вызова этого метода
//
//	Обновление происходит по следующему сценарию.
//	1. Бэкенд проверяет активность устройства, и делает его активным, если требуется (см. ActivityInterceptionType).
//	2. Если устройство не является активным после шага 1, то команда тихо игнорируется (никаких событий или ошибок не произойдет). Выполнение прерывается.
//	3. Бэкенд получает список очередей из Единой Очереди Воспроизведения.
//	4. Если id последней очереди в списке совпадает с actual_queue_id, то обновление очереди не произойдет и мы перейдем к пункту 6.
//	5. Пробуем обновить стейт на основании ЕОВ. Новое состояние плеера, в случае обновления,
//	   будет содержать [UpdateVersion#device_id] отличным от id устройства, отправившего сообщение
//	6. Если стейт был обновлен или сменилось активное устройство, то рассылаем эвент всем устройствам. Иначе выходим из метода без событий и ошибок.
type SyncStateFromEOV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор очереди устройства в ЕОВ.
	// Пустая строка - допустимое значение, если клиент не имеет информации о синхронизации очередей.
	ActualQueueId string `protobuf:"bytes,1,opt,name=actual_queue_id,json=actualQueueId,proto3" json:"actual_queue_id,omitempty"`
}

func (x *SyncStateFromEOV) Reset() {
	*x = SyncStateFromEOV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_ynison_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStateFromEOV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStateFromEOV) ProtoMessage() {}

func (x *SyncStateFromEOV) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_ynison_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStateFromEOV.ProtoReflect.Descriptor instead.
func (*SyncStateFromEOV) Descriptor() ([]byte, []int) {
	return file_ynisonstate_ynison_state_proto_rawDescGZIP(), []int{11}
}

func (x *SyncStateFromEOV) GetActualQueueId() string {
	if x != nil {
		return x.ActualQueueId
	}
	return ""
}

var File_ynisonstate_ynison_state_proto protoreflect.FileDescriptor

var file_ynisonstate_ynison_state_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79,
	0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd8, 0x08, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x59, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x64, 0x0a, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x17, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4e,
	0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f,
	0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x65, 0x6f, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x4f, 0x56, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6f, 0x76, 0x12,
	0x3b, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x7a,
	0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x75, 0x74, 0x59, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x43, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x43, 0x45, 0x50, 0x54, 0x5f, 0x45, 0x41, 0x47, 0x45, 0x52, 0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x50,
	0x75, 0x74, 0x59, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69,
	0x64, 0x22, 0x6a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x6e, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x60, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x59, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0x6c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x6e, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x51, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x1c, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6f,
	0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x4f, 0x56,
	0x52, 0x18, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x6f, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x66, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79,
	0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x4f, 0x56, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64,
	0x32, 0xaf, 0x01, 0x0a, 0x12, 0x59, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x59,
	0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x59, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x75, 0x74, 0x59, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2f, 0x2f,
	0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x59, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x50, 0x75, 0x74, 0x59, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x67, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a, 0x42, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2d, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ynisonstate_ynison_state_proto_rawDescOnce sync.Once
	file_ynisonstate_ynison_state_proto_rawDescData = file_ynisonstate_ynison_state_proto_rawDesc
)

func file_ynisonstate_ynison_state_proto_rawDescGZIP() []byte {
	file_ynisonstate_ynison_state_proto_rawDescOnce.Do(func() {
		file_ynisonstate_ynison_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_ynisonstate_ynison_state_proto_rawDescData)
	})
	return file_ynisonstate_ynison_state_proto_rawDescData
}

var file_ynisonstate_ynison_state_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ynisonstate_ynison_state_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ynisonstate_ynison_state_proto_goTypes = []interface{}{
	(PutYnisonStateRequest_ActivityInterceptionType)(0), // 0: ynison_state.PutYnisonStateRequest.ActivityInterceptionType
	(*PutYnisonStateRequest)(nil),                       // 1: ynison_state.PutYnisonStateRequest
	(*PutYnisonStateResponse)(nil),                      // 2: ynison_state.PutYnisonStateResponse
	(*UpdatePlayerQueueInject)(nil),                     // 3: ynison_state.UpdatePlayerQueueInject
	(*UpdateActiveDevice)(nil),                          // 4: ynison_state.UpdateActiveDevice
	(*UpdatePlayingStatus)(nil),                         // 5: ynison_state.UpdatePlayingStatus
	(*UpdateVolume)(nil),                                // 6: ynison_state.UpdateVolume
	(*UpdateVolumeInfo)(nil),                            // 7: ynison_state.UpdateVolumeInfo
	(*UpdatePlayerState)(nil),                           // 8: ynison_state.UpdatePlayerState
	(*UpdateFullState)(nil),                             // 9: ynison_state.UpdateFullState
	(*UpdateSessionParams)(nil),                         // 10: ynison_state.UpdateSessionParams
	(*UpdateDevice)(nil),                                // 11: ynison_state.UpdateDevice
	(*SyncStateFromEOV)(nil),                            // 12: ynison_state.SyncStateFromEOV
	(*PlayerState)(nil),                                 // 13: ynison_state.PlayerState
	(*Device)(nil),                                      // 14: ynison_state.Device
	(*wrapperspb.StringValue)(nil),                      // 15: google.protobuf.StringValue
	(*PlayerQueueInject)(nil),                           // 16: ynison_state.PlayerQueueInject
	(*PlayingStatus)(nil),                               // 17: ynison_state.PlayingStatus
	(*DeviceVolume)(nil),                                // 18: ynison_state.DeviceVolume
	(*DeviceInfo)(nil),                                  // 19: ynison_state.DeviceInfo
	(*DeviceCapabilities)(nil),                          // 20: ynison_state.DeviceCapabilities
}
var file_ynisonstate_ynison_state_proto_depIdxs = []int32{
	9,  // 0: ynison_state.PutYnisonStateRequest.update_full_state:type_name -> ynison_state.UpdateFullState
	4,  // 1: ynison_state.PutYnisonStateRequest.update_active_device:type_name -> ynison_state.UpdateActiveDevice
	5,  // 2: ynison_state.PutYnisonStateRequest.update_playing_status:type_name -> ynison_state.UpdatePlayingStatus
	8,  // 3: ynison_state.PutYnisonStateRequest.update_player_state:type_name -> ynison_state.UpdatePlayerState
	6,  // 4: ynison_state.PutYnisonStateRequest.update_volume:type_name -> ynison_state.UpdateVolume
	3,  // 5: ynison_state.PutYnisonStateRequest.update_player_queue_inject:type_name -> ynison_state.UpdatePlayerQueueInject
	10, // 6: ynison_state.PutYnisonStateRequest.update_session_params:type_name -> ynison_state.UpdateSessionParams
	7,  // 7: ynison_state.PutYnisonStateRequest.update_volume_info:type_name -> ynison_state.UpdateVolumeInfo
	12, // 8: ynison_state.PutYnisonStateRequest.sync_state_from_eov:type_name -> ynison_state.SyncStateFromEOV
	0,  // 9: ynison_state.PutYnisonStateRequest.activity_interception_type:type_name -> ynison_state.PutYnisonStateRequest.ActivityInterceptionType
	13, // 10: ynison_state.PutYnisonStateResponse.player_state:type_name -> ynison_state.PlayerState
	14, // 11: ynison_state.PutYnisonStateResponse.devices:type_name -> ynison_state.Device
	15, // 12: ynison_state.PutYnisonStateResponse.active_device_id_optional:type_name -> google.protobuf.StringValue
	16, // 13: ynison_state.UpdatePlayerQueueInject.player_queue_inject:type_name -> ynison_state.PlayerQueueInject
	15, // 14: ynison_state.UpdateActiveDevice.device_id_optional:type_name -> google.protobuf.StringValue
	17, // 15: ynison_state.UpdatePlayingStatus.playing_status:type_name -> ynison_state.PlayingStatus
	18, // 16: ynison_state.UpdateVolumeInfo.volume_info:type_name -> ynison_state.DeviceVolume
	13, // 17: ynison_state.UpdatePlayerState.player_state:type_name -> ynison_state.PlayerState
	13, // 18: ynison_state.UpdateFullState.player_state:type_name -> ynison_state.PlayerState
	11, // 19: ynison_state.UpdateFullState.device:type_name -> ynison_state.UpdateDevice
	12, // 20: ynison_state.UpdateFullState.sync_state_from_eov_optional:type_name -> ynison_state.SyncStateFromEOV
	19, // 21: ynison_state.UpdateDevice.info:type_name -> ynison_state.DeviceInfo
	20, // 22: ynison_state.UpdateDevice.capabilities:type_name -> ynison_state.DeviceCapabilities
	18, // 23: ynison_state.UpdateDevice.volume_info:type_name -> ynison_state.DeviceVolume
	1,  // 24: ynison_state.YnisonStateService.PutYnisonState:input_type -> ynison_state.PutYnisonStateRequest
	2,  // 25: ynison_state.YnisonStateService.PutYnisonState:output_type -> ynison_state.PutYnisonStateResponse
	25, // [25:26] is the sub-list for method output_type
	24, // [24:25] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_ynisonstate_ynison_state_proto_init() }
func file_ynisonstate_ynison_state_proto_init() {
	if File_ynisonstate_ynison_state_proto != nil {
		return
	}
	file_ynisonstate_device_proto_init()
	file_ynisonstate_player_state_proto_init()
	file_ynisonstate_player_queue_inject_proto_init()
	file_ynisonstate_playing_status_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ynisonstate_ynison_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutYnisonStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutYnisonStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlayerQueueInject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActiveDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlayingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFullState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_ynison_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStateFromEOV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ynisonstate_ynison_state_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PutYnisonStateRequest_UpdateFullState)(nil),
		(*PutYnisonStateRequest_UpdateActiveDevice)(nil),
		(*PutYnisonStateRequest_UpdatePlayingStatus)(nil),
		(*PutYnisonStateRequest_UpdatePlayerState)(nil),
		(*PutYnisonStateRequest_UpdateVolume)(nil),
		(*PutYnisonStateRequest_UpdatePlayerQueueInject)(nil),
		(*PutYnisonStateRequest_UpdateSessionParams)(nil),
		(*PutYnisonStateRequest_UpdateVolumeInfo)(nil),
		(*PutYnisonStateRequest_SyncStateFromEov)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ynisonstate_ynison_state_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ynisonstate_ynison_state_proto_goTypes,
		DependencyIndexes: file_ynisonstate_ynison_state_proto_depIdxs,
		EnumInfos:         file_ynisonstate_ynison_state_proto_enumTypes,
		MessageInfos:      file_ynisonstate_ynison_state_proto_msgTypes,
	}.Build()
	File_ynisonstate_ynison_state_proto = out.File
	file_ynisonstate_ynison_state_proto_rawDesc = nil
	file_ynisonstate_ynison_state_proto_goTypes = nil
	file_ynisonstate_ynison_state_proto_depIdxs = nil
}
