// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: ynisonstate/queue.proto

package ynisonstate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Удалить вместе с полем `entity_type`. Причины описаны в комментарии к полю.
//
// Deprecated: Do not use.
type PlayerQueue_EntityType int32

const (
	// Fallback value.
	PlayerQueue_UNSPECIFIED PlayerQueue_EntityType = 0
	// Common queue, popular tracks of an artist. Consists of [Playable.PlayableType.TRACK]
	PlayerQueue_ARTIST PlayerQueue_EntityType = 1
	// Common queue, tracks from a playlist. Consists of [Playable.PlayableType.TRACK]
	PlayerQueue_PLAYLIST PlayerQueue_EntityType = 2
	// Common queue, tracks from an album. Consists of [Playable.PlayableType.TRACK]
	PlayerQueue_ALBUM PlayerQueue_EntityType = 3
	// Dynamic radio queue, based on recommendations by station seed. Consists of [Playable.PlayableType.TRACK]
	PlayerQueue_RADIO PlayerQueue_EntityType = 4
	// Common queue, random set of tracks. Consists of [Playable.PlayableType.TRACK]
	PlayerQueue_VARIOUS PlayerQueue_EntityType = 5
	// Stream of neuro music. Consists of [Playable.PlayableType.INFINITE]
	PlayerQueue_GENERATIVE PlayerQueue_EntityType = 6
	// Stream of FM radio. Consists of [Playable.PlayableType.INFINITE]
	PlayerQueue_FM_RADIO PlayerQueue_EntityType = 7
	// Dynamic video clips queue, based on recommendations.
	PlayerQueue_VIDEO_WAVE PlayerQueue_EntityType = 8
	// Common queue, based on tracks located on a device file system.
	// Consists of [Playable.PlayableType.LOCAL_TRACK]
	PlayerQueue_LOCAL_TRACKS PlayerQueue_EntityType = 9
)

// Enum value maps for PlayerQueue_EntityType.
var (
	PlayerQueue_EntityType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ARTIST",
		2: "PLAYLIST",
		3: "ALBUM",
		4: "RADIO",
		5: "VARIOUS",
		6: "GENERATIVE",
		7: "FM_RADIO",
		8: "VIDEO_WAVE",
		9: "LOCAL_TRACKS",
	}
	PlayerQueue_EntityType_value = map[string]int32{
		"UNSPECIFIED":  0,
		"ARTIST":       1,
		"PLAYLIST":     2,
		"ALBUM":        3,
		"RADIO":        4,
		"VARIOUS":      5,
		"GENERATIVE":   6,
		"FM_RADIO":     7,
		"VIDEO_WAVE":   8,
		"LOCAL_TRACKS": 9,
	}
)

func (x PlayerQueue_EntityType) Enum() *PlayerQueue_EntityType {
	p := new(PlayerQueue_EntityType)
	*p = x
	return p
}

func (x PlayerQueue_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerQueue_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_ynisonstate_queue_proto_enumTypes[0].Descriptor()
}

func (PlayerQueue_EntityType) Type() protoreflect.EnumType {
	return &file_ynisonstate_queue_proto_enumTypes[0]
}

func (x PlayerQueue_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerQueue_EntityType.Descriptor instead.
func (PlayerQueue_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0}
}

// Дополнительная информация для источника трека, используется для уточнения места откуда этот трек взят
type PlayerQueue_EntityContext int32

const (
	// Трек взят напрямую из сущности
	// - плейлист
	// - альбом
	// - популярные треки артиста
	PlayerQueue_BASED_ON_ENTITY_BY_DEFAULT PlayerQueue_EntityContext = 0
	// Трек взят из раздела "Треки" в коллекции
	// Используется только для неизвестного (unspecified) источника
	PlayerQueue_USER_TRACKS PlayerQueue_EntityContext = 1
	// Трек взят из раздела "Скачанные треки"
	// Используется только для неизвестного (unspecified) источника
	PlayerQueue_DOWNLOADED_TRACKS PlayerQueue_EntityContext = 2
	// Трек взят из поиска
	// Используется только для неизвестного (unspecified) источника
	PlayerQueue_SEARCH PlayerQueue_EntityContext = 3
	// Трек взят из истории прослушивания:
	// - когда источник плейлист
	// - когда источник альбом
	// - когда источник артист
	// - для неизвестного (unspecified) источника с вкладки "Слушали вперемешку"
	PlayerQueue_MUSIC_HISTORY PlayerQueue_EntityContext = 4
	// Трек взят из истории прослушивания c вкладки "Результаты поиска", используется только для неизвестного (unspecified) источника
	PlayerQueue_MUSIC_HISTORY_SEARCH PlayerQueue_EntityContext = 5
	// Трек взят с экрана "Знакомое вам" c вкладки "У вас в Коллекции"
	// Используется только для источника артиста
	PlayerQueue_ARTIST_MY_COLLECTION PlayerQueue_EntityContext = 6
	// Трек взят с экрана "Знакомое вам" c вкладки "Слушали в моей волне"
	// Используется только для источника артиста
	PlayerQueue_ARTIST_FAMILIAR_FROM_WAVE PlayerQueue_EntityContext = 7
)

// Enum value maps for PlayerQueue_EntityContext.
var (
	PlayerQueue_EntityContext_name = map[int32]string{
		0: "BASED_ON_ENTITY_BY_DEFAULT",
		1: "USER_TRACKS",
		2: "DOWNLOADED_TRACKS",
		3: "SEARCH",
		4: "MUSIC_HISTORY",
		5: "MUSIC_HISTORY_SEARCH",
		6: "ARTIST_MY_COLLECTION",
		7: "ARTIST_FAMILIAR_FROM_WAVE",
	}
	PlayerQueue_EntityContext_value = map[string]int32{
		"BASED_ON_ENTITY_BY_DEFAULT": 0,
		"USER_TRACKS":                1,
		"DOWNLOADED_TRACKS":          2,
		"SEARCH":                     3,
		"MUSIC_HISTORY":              4,
		"MUSIC_HISTORY_SEARCH":       5,
		"ARTIST_MY_COLLECTION":       6,
		"ARTIST_FAMILIAR_FROM_WAVE":  7,
	}
)

func (x PlayerQueue_EntityContext) Enum() *PlayerQueue_EntityContext {
	p := new(PlayerQueue_EntityContext)
	*p = x
	return p
}

func (x PlayerQueue_EntityContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerQueue_EntityContext) Descriptor() protoreflect.EnumDescriptor {
	return file_ynisonstate_queue_proto_enumTypes[1].Descriptor()
}

func (PlayerQueue_EntityContext) Type() protoreflect.EnumType {
	return &file_ynisonstate_queue_proto_enumTypes[1]
}

func (x PlayerQueue_EntityContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerQueue_EntityContext.Descriptor instead.
func (PlayerQueue_EntityContext) EnumDescriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 1}
}

type PlayerStateOptions_RepeatMode int32

const (
	PlayerStateOptions_UNSPECIFIED PlayerStateOptions_RepeatMode = 0
	// Без повтора.
	PlayerStateOptions_NONE PlayerStateOptions_RepeatMode = 1
	// Повтор одного трека.
	PlayerStateOptions_ONE PlayerStateOptions_RepeatMode = 2
	// Повтор всей сущности.
	PlayerStateOptions_ALL PlayerStateOptions_RepeatMode = 3
)

// Enum value maps for PlayerStateOptions_RepeatMode.
var (
	PlayerStateOptions_RepeatMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NONE",
		2: "ONE",
		3: "ALL",
	}
	PlayerStateOptions_RepeatMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NONE":        1,
		"ONE":         2,
		"ALL":         3,
	}
)

func (x PlayerStateOptions_RepeatMode) Enum() *PlayerStateOptions_RepeatMode {
	p := new(PlayerStateOptions_RepeatMode)
	*p = x
	return p
}

func (x PlayerStateOptions_RepeatMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStateOptions_RepeatMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ynisonstate_queue_proto_enumTypes[2].Descriptor()
}

func (PlayerStateOptions_RepeatMode) Type() protoreflect.EnumType {
	return &file_ynisonstate_queue_proto_enumTypes[2]
}

func (x PlayerStateOptions_RepeatMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStateOptions_RepeatMode.Descriptor instead.
func (PlayerStateOptions_RepeatMode) EnumDescriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{1, 0}
}

// Очередь воспроизведения.
type PlayerQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор сущности.
	// Например, id альбома/плейлиста/радио и проч.
	//
	// У каждого вида сущности свой формат id. Поэтому был введён `message Queue`, в котором
	// все идентификаторы разложены в более правильную структуру.
	//
	// Старое поле будет заполнять бэкенд для совместимости со старыми клиентами, пока не примем
	// решение отключить старых клиентов (спустя 1-2 месяца после того, как последний "новый" клиент
	// поддержит эту доработку). Т.е. новый клиент должен отправлять и читать только новое поле.
	// После удаления пометить поле reserved (правило protubuf).
	//
	// Deprecated: Do not use.
	EntityId string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Тип сущности.
	//
	// Структура сущностей лучшим образом представляется в иерархичной структуре через oneof, а не
	// в плоской структуре через enum. Поэтому был введён `message Queue`, в котором все сущности
	// разложены в более правильную структуру.
	//
	// Старое поле будет заполнять бэкенд для совместимости со старыми клиентами, пока не примем
	// решение отключить старых клиентов (спустя 1-2 месяца после того, как последний "новый" клиент
	// поддержит эту доработку). Т.е. новый клиент должен отправлять и читать только новое поле.
	// После удаления пометить поле reserved (правило protubuf).
	//
	// `message EntityType` удалить вместе с полем.
	//
	// Deprecated: Do not use.
	EntityType PlayerQueue_EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=ynison_state.PlayerQueue_EntityType" json:"entity_type,omitempty"`
	Queue      *PlayerQueue_Queue     `protobuf:"bytes,12,opt,name=queue,proto3" json:"queue,omitempty"`
	// Индекс playable в очереди.
	// Используется, например, для плейлиста с одинаковыми треками.
	//
	// Всегда содержит индекс сущности из оригинального списка `playable_list`.
	CurrentPlayableIndex int32 `protobuf:"varint,3,opt,name=current_playable_index,json=currentPlayableIndex,proto3" json:"current_playable_index,omitempty"` // int32 (вместо uint32) чтобы можно было задать -1, когда playable_list пустой
	// Список сущностей в очереди.
	PlayableList []*Playable `protobuf:"bytes,4,rep,name=playable_list,json=playableList,proto3" json:"playable_list,omitempty"`
	// Настройки плеера.
	Options *PlayerStateOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	// Версия последнего изменения.
	Version *UpdateVersion `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// Настройки шаффла.
	// При выключенном шаффле не приходят.
	ShuffleOptional *Shuffle `protobuf:"bytes,7,opt,name=shuffle_optional,json=shuffleOptional,proto3" json:"shuffle_optional,omitempty"`
	// Контекст воспроизведения.
	//
	// Контекст применим не ко всем сущностям. Поэтому был введён `message Queue`, в котором
	// контекст применяется только к сущностям из фонотеки.
	//
	// Старое поле будет заполнять бэкенд для совместимости со старыми клиентами, пока не примем
	// решение отключить старых клиентов (спустя 1-2 месяца после того, как последний "новый" клиент
	// поддержит эту доработку). Т.е. новый клиент должен отправлять и читать только новое поле.
	// После удаления пометить поле reserved (правило protubuf).
	//
	// Deprecated: Do not use.
	EntityContext PlayerQueue_EntityContext `protobuf:"varint,8,opt,name=entity_context,json=entityContext,proto3,enum=ynison_state.PlayerQueue_EntityContext" json:"entity_context,omitempty"`
	// Опциональный фром очереди.
	//
	// Используется для настройки фрома, когда его нельзя достать из списка `playable_list`.
	// Такое возможно при старте юнисона на основе единой очереди воспроизведения.
	// Если у пользователя играло радио, в ЕОВ будет пустой `playable_list`,
	// соответственно фрома не будет.
	FromOptional *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=from_optional,json=fromOptional,proto3" json:"from_optional,omitempty"`
	// Изначальный id+type сущности, которой была проинициализирована очередь
	//
	// Хранение этого поля отдельно теряет смысл с введением поддержки смешанной очереди.
	// Информацию об источнике попадания трека в очередь следует брать
	// из [WaveQueue.EntityOptions.track_sources].
	//
	// Старое поле будет заполнять бэкенд для совместимости со старыми клиентами, пока не примем
	// решение отключить старых клиентов (спустя 1-2 месяца после того, как последний "новый" клиент
	// поддержит эту доработку). Т.е. новый клиент должен отправлять и читать только новое поле.
	// После удаления пометить поле reserved (правило protubuf).
	//
	// `message InitialEntity` удалить вместе с полем.
	//
	// Deprecated: Do not use.
	InitialEntityOptional *PlayerQueue_InitialEntity `protobuf:"bytes,10,opt,name=initial_entity_optional,json=initialEntityOptional,proto3" json:"initial_entity_optional,omitempty"`
	// Дополнительные параметры для очередей
	//
	// Теперь эта информация находится в `message Queue`.
	//
	// Старое поле будет заполнять бэкенд для совместимости со старыми клиентами, пока не примем
	// решение отключить старых клиентов (спустя 1-2 месяца после того, как последний "новый" клиент
	// поддержит эту доработку). Т.е. новый клиент должен отправлять и читать только новое поле.
	// После удаления пометить поле reserved (правило protubuf).
	//
	// `message PlayerQueueOptions` удалить вместе с полем.
	//
	// Deprecated: Do not use.
	AddingOptionsOptional *PlayerQueue_PlayerQueueOptions `protobuf:"bytes,11,opt,name=adding_options_optional,json=addingOptionsOptional,proto3" json:"adding_options_optional,omitempty"`
}

func (x *PlayerQueue) Reset() {
	*x = PlayerQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue) ProtoMessage() {}

func (x *PlayerQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue.ProtoReflect.Descriptor instead.
func (*PlayerQueue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *PlayerQueue) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

// Deprecated: Do not use.
func (x *PlayerQueue) GetEntityType() PlayerQueue_EntityType {
	if x != nil {
		return x.EntityType
	}
	return PlayerQueue_UNSPECIFIED
}

func (x *PlayerQueue) GetQueue() *PlayerQueue_Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *PlayerQueue) GetCurrentPlayableIndex() int32 {
	if x != nil {
		return x.CurrentPlayableIndex
	}
	return 0
}

func (x *PlayerQueue) GetPlayableList() []*Playable {
	if x != nil {
		return x.PlayableList
	}
	return nil
}

func (x *PlayerQueue) GetOptions() *PlayerStateOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PlayerQueue) GetVersion() *UpdateVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PlayerQueue) GetShuffleOptional() *Shuffle {
	if x != nil {
		return x.ShuffleOptional
	}
	return nil
}

// Deprecated: Do not use.
func (x *PlayerQueue) GetEntityContext() PlayerQueue_EntityContext {
	if x != nil {
		return x.EntityContext
	}
	return PlayerQueue_BASED_ON_ENTITY_BY_DEFAULT
}

func (x *PlayerQueue) GetFromOptional() *wrapperspb.StringValue {
	if x != nil {
		return x.FromOptional
	}
	return nil
}

// Deprecated: Do not use.
func (x *PlayerQueue) GetInitialEntityOptional() *PlayerQueue_InitialEntity {
	if x != nil {
		return x.InitialEntityOptional
	}
	return nil
}

// Deprecated: Do not use.
func (x *PlayerQueue) GetAddingOptionsOptional() *PlayerQueue_PlayerQueueOptions {
	if x != nil {
		return x.AddingOptionsOptional
	}
	return nil
}

type PlayerStateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Режим повтора.
	RepeatMode PlayerStateOptions_RepeatMode `protobuf:"varint,1,opt,name=repeat_mode,json=repeatMode,proto3,enum=ynison_state.PlayerStateOptions_RepeatMode" json:"repeat_mode,omitempty"`
}

func (x *PlayerStateOptions) Reset() {
	*x = PlayerStateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStateOptions) ProtoMessage() {}

func (x *PlayerStateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStateOptions.ProtoReflect.Descriptor instead.
func (*PlayerStateOptions) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerStateOptions) GetRepeatMode() PlayerStateOptions_RepeatMode {
	if x != nil {
		return x.RepeatMode
	}
	return PlayerStateOptions_UNSPECIFIED
}

type Shuffle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Зашафленный список индексов сущностей в очереди.
	PlayableIndices []uint32 `protobuf:"varint,1,rep,packed,name=playable_indices,json=playableIndices,proto3" json:"playable_indices,omitempty"`
}

func (x *Shuffle) Reset() {
	*x = Shuffle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shuffle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shuffle) ProtoMessage() {}

func (x *Shuffle) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shuffle.ProtoReflect.Descriptor instead.
func (*Shuffle) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{2}
}

func (x *Shuffle) GetPlayableIndices() []uint32 {
	if x != nil {
		return x.PlayableIndices
	}
	return nil
}

// Структура:
// Каждому виду очередей соотвествует один из типов [Playable.PlayableType].
// Каждому плеяблу с типом [Playable.PlayableType.TRACK] соотвествует сущность
// из таблицы сущностей (См. [Queue.WaveQueue.EntityOptions])
//
// Очереди не имеет универсального идентификатора. Вместо этого каждая очередь сама решает,
// что будет её идентифицировать (См. [Queue.type]).
type PlayerQueue_Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*PlayerQueue_Queue_WaveQueue_
	//	*PlayerQueue_Queue_GenerativeQueue_
	//	*PlayerQueue_Queue_FmRadioQueue_
	//	*PlayerQueue_Queue_VideoWaveQueue_
	//	*PlayerQueue_Queue_LocalTracksQueue_
	Type isPlayerQueue_Queue_Type `protobuf_oneof:"type"`
}

func (x *PlayerQueue_Queue) Reset() {
	*x = PlayerQueue_Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue) ProtoMessage() {}

func (x *PlayerQueue_Queue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0}
}

func (m *PlayerQueue_Queue) GetType() isPlayerQueue_Queue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *PlayerQueue_Queue) GetWaveQueue() *PlayerQueue_Queue_WaveQueue {
	if x, ok := x.GetType().(*PlayerQueue_Queue_WaveQueue_); ok {
		return x.WaveQueue
	}
	return nil
}

func (x *PlayerQueue_Queue) GetGenerativeQueue() *PlayerQueue_Queue_GenerativeQueue {
	if x, ok := x.GetType().(*PlayerQueue_Queue_GenerativeQueue_); ok {
		return x.GenerativeQueue
	}
	return nil
}

func (x *PlayerQueue_Queue) GetFmRadioQueue() *PlayerQueue_Queue_FmRadioQueue {
	if x, ok := x.GetType().(*PlayerQueue_Queue_FmRadioQueue_); ok {
		return x.FmRadioQueue
	}
	return nil
}

func (x *PlayerQueue_Queue) GetVideoWaveQueue() *PlayerQueue_Queue_VideoWaveQueue {
	if x, ok := x.GetType().(*PlayerQueue_Queue_VideoWaveQueue_); ok {
		return x.VideoWaveQueue
	}
	return nil
}

func (x *PlayerQueue_Queue) GetLocalTracksQueue() *PlayerQueue_Queue_LocalTracksQueue {
	if x, ok := x.GetType().(*PlayerQueue_Queue_LocalTracksQueue_); ok {
		return x.LocalTracksQueue
	}
	return nil
}

type isPlayerQueue_Queue_Type interface {
	isPlayerQueue_Queue_Type()
}

type PlayerQueue_Queue_WaveQueue_ struct {
	// Все типы очередей в виде message'ей.
	WaveQueue *PlayerQueue_Queue_WaveQueue `protobuf:"bytes,1,opt,name=wave_queue,json=waveQueue,proto3,oneof"`
}

type PlayerQueue_Queue_GenerativeQueue_ struct {
	GenerativeQueue *PlayerQueue_Queue_GenerativeQueue `protobuf:"bytes,2,opt,name=generative_queue,json=generativeQueue,proto3,oneof"`
}

type PlayerQueue_Queue_FmRadioQueue_ struct {
	FmRadioQueue *PlayerQueue_Queue_FmRadioQueue `protobuf:"bytes,3,opt,name=fm_radio_queue,json=fmRadioQueue,proto3,oneof"`
}

type PlayerQueue_Queue_VideoWaveQueue_ struct {
	VideoWaveQueue *PlayerQueue_Queue_VideoWaveQueue `protobuf:"bytes,4,opt,name=video_wave_queue,json=videoWaveQueue,proto3,oneof"`
}

type PlayerQueue_Queue_LocalTracksQueue_ struct {
	LocalTracksQueue *PlayerQueue_Queue_LocalTracksQueue `protobuf:"bytes,5,opt,name=local_tracks_queue,json=localTracksQueue,proto3,oneof"`
}

func (*PlayerQueue_Queue_WaveQueue_) isPlayerQueue_Queue_Type() {}

func (*PlayerQueue_Queue_GenerativeQueue_) isPlayerQueue_Queue_Type() {}

func (*PlayerQueue_Queue_FmRadioQueue_) isPlayerQueue_Queue_Type() {}

func (*PlayerQueue_Queue_VideoWaveQueue_) isPlayerQueue_Queue_Type() {}

func (*PlayerQueue_Queue_LocalTracksQueue_) isPlayerQueue_Queue_Type() {}

// Удалить вместе с полем `initial_entity_optional`. Причины описаны в комментарии к полю.
//
// Deprecated: Do not use.
type PlayerQueue_InitialEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId   string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EntityType PlayerQueue_EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=ynison_state.PlayerQueue_EntityType" json:"entity_type,omitempty"`
}

func (x *PlayerQueue_InitialEntity) Reset() {
	*x = PlayerQueue_InitialEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_InitialEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_InitialEntity) ProtoMessage() {}

func (x *PlayerQueue_InitialEntity) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_InitialEntity.ProtoReflect.Descriptor instead.
func (*PlayerQueue_InitialEntity) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PlayerQueue_InitialEntity) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *PlayerQueue_InitialEntity) GetEntityType() PlayerQueue_EntityType {
	if x != nil {
		return x.EntityType
	}
	return PlayerQueue_UNSPECIFIED
}

// Удалить вместе с полем `adding_options_optional`. Причины описаны в комментарии к полю.
//
// Deprecated: Do not use.
type PlayerQueue_PlayerQueueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Заполняемое поле зависит от entity_type текущей очереди
	//
	// Types that are assignable to Options:
	//
	//	*PlayerQueue_PlayerQueueOptions_RadioOptions_
	Options isPlayerQueue_PlayerQueueOptions_Options `protobuf_oneof:"options"`
}

func (x *PlayerQueue_PlayerQueueOptions) Reset() {
	*x = PlayerQueue_PlayerQueueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_PlayerQueueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_PlayerQueueOptions) ProtoMessage() {}

func (x *PlayerQueue_PlayerQueueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_PlayerQueueOptions.ProtoReflect.Descriptor instead.
func (*PlayerQueue_PlayerQueueOptions) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 2}
}

func (m *PlayerQueue_PlayerQueueOptions) GetOptions() isPlayerQueue_PlayerQueueOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *PlayerQueue_PlayerQueueOptions) GetRadioOptions() *PlayerQueue_PlayerQueueOptions_RadioOptions {
	if x, ok := x.GetOptions().(*PlayerQueue_PlayerQueueOptions_RadioOptions_); ok {
		return x.RadioOptions
	}
	return nil
}

type isPlayerQueue_PlayerQueueOptions_Options interface {
	isPlayerQueue_PlayerQueueOptions_Options()
}

type PlayerQueue_PlayerQueueOptions_RadioOptions_ struct {
	RadioOptions *PlayerQueue_PlayerQueueOptions_RadioOptions `protobuf:"bytes,1,opt,name=radio_options,json=radioOptions,proto3,oneof"`
}

func (*PlayerQueue_PlayerQueueOptions_RadioOptions_) isPlayerQueue_PlayerQueueOptions_Options() {}

// Очередь состоит из [Playable.PlayableType.TRACK].
// Автоматически продляется в случае, если треки закончились.
// Поддерживает действия "Скип", "Лайк/Дизлайк", "Играть следующим", "Добавить в очередь",
// "Удалить", "Переместить", "Повтор трека". В общем, все действия, которые поддерживала
// COMMON очередь.
//
// Может находиться в двух состояниях:
// 1. Играли только треки фонотечных сущностей (исполнитель, плейлист, альбом), но еще не
// были запрошены рекомендательные треки.
// 2. Рекомендательные треки были запрошены.
//
// В состоянии "без рекомендательных треков" очередь не имеет единого строкового
// идентификатора, т.к. состоит из треков разных сущностей. Для различения таких очередей
// друг от друга следует использовать [PlayerQueue.playable_list] и
// [WaveQueue.EntityOptions]. Как ранее было в VARIOUS.
// В состоянии "без рекомендательных треков" значение поля
// [WaveQueue.EntityOptions.wave_entity_optional] не задано.
//
// В состоянии "с рекомендательными треками" у очереди в таблице сущностей, в дополнение к
// фонотечным записям [WaveQueue.EntityOptions.PhonotekaEntity], появляется единственная и
// уникальная для всей очереди запись [WaveQueue.EntityOptions.WaveSession], которую можно
// использовать в качестве идентификатора.
// В этом состоянии поле [WaveQueue.EntityOptions.wave_entity_optional] заполнено.
//
// Очередь состоит из трех частей:
// 1. Прослушанные треки (в `playable_list`). Есть исторический нюанс, что в `playable_list`
// в конце, при наличии, лежит один первый рекомендованный трек.
// 2. Добавленные в очередь, но не прослушанные треки (в `playable_list`)
// 3. Непрослушанные рекомендованные треки (в `recommended_playable_list`)
// [0, 1, 2, 3a, 4a, ...a, 5r, 6r, ...r], где
// a - добавленные в очерередь треки, r - рекомендованные.
type PlayerQueue_Queue_WaveQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Непрослушанные рекомендованные треки.
	//
	// У таких треков следует передавать batch_id (см. [TrackInfo.batch_id]).
	//
	// Список может быть непустым только если
	// заполнено [EntityOptions.wave_entity_optional].
	//
	// Есть нюанс, что в `playable_list` в конце, при наличии, лежит один первый
	// рекомендованный трек. Это историческая логика, которая позволяет отображать
	// обложку следующего трека в плеере. Так что первый трек из `recommended_playable_list`
	// будет дублем последнего трека из `playable_list` (при наличии такого трека).
	//
	// При конвертации deprecated стейта в новый, либо переданном пустом списке, бэкенд
	// должен заполнить `recommended_playable_list` одним или нулём треков по следующему
	// алгоритму:
	// 1. Если последний трек из `playable_list` существует и `current_playable_index`
	// не равен `playable_list.size - 1` (текущий индекс не равен индексу последнего трека),
	// то в `recommended_playable_list` должен быть сложен этот последний трек.
	// 2. В противном случае, `recommended_playable_list` должен оставаться пустым.
	//
	// При конвертации нового стейта в deprecated стейт, дополнительно ничего
	// делать не требуется, т.к. клиенты учитывают нюанс формирования `playable_list`.
	RecommendedPlayableList []*Playable `protobuf:"bytes,1,rep,name=recommended_playable_list,json=recommendedPlayableList,proto3" json:"recommended_playable_list,omitempty"`
	// Индекс последнего прослушанного трека в состоянии "с рекомендательными треками".
	// Индекс потенциального рекомендательного трека в состоянии "без рекомендательных
	// треков".
	// Другими словами, крайний трек перед добавленными или рекомендованными треками в
	// состоянии "с рекомендательными треками".
	//
	// Например (в состоянии "с рекомендательными треками"):
	// 1. Есть очередь из треков ["0", "1", "2"], все прослушаны. Текущий трек "2".
	// `live_playable_index` равен 2.
	// 2. Есть очередь из треков ["0", "1", "2"], все прослушаны. Текущий трек "2".
	// Ставим "играть следующим" трек "3a". Очередь теперь ["0", "1", "2", "3a"].
	// `live_playable_index` останется равен 2, т.к. трек "3a" ещё не прослушан.
	// 3. Есть очередь из треков ["0", "1", "2"], все прослушаны. Текущий трек "1".
	// Ставим "играть следующим" трек "3a". Очередь теперь ["0", "1", "3a", "2"].
	// `live_playable_index` будет равен 3, т.к. последний прослушанный трек "2" сдвинулся.
	// 4. Очередь пуста - `live_playable_index` равен -1.
	//
	// Валидным индексом считается:
	// 1. В состоянии "с рекомендательными треками" -
	// `live_playable_index in [current_playable_index, playable_list.size)`
	// 2. В состоянии "без рекомендательных треков" -
	// `live_playable_index == playable_list.size`
	// 3. Значение по умолчанию - 0.
	//
	// При конвертации deprecated стейта в новый, либо при переданном значении поля `0`:
	// 1. В состоянии "с рекомендательными треками" бэкенд должен заполнить поле значением
	// равным `playable_list.size - 2`, но не меньшим, чем `current_playable_index`,
	// т.е. возможно значение `playable_list.size - 1`.
	// 2. В состоянии "без рекомендательных треков" значение поля должно быть равно
	// `playable_list.size`, указывая на несуществующий в этом режиме потенциальный
	// рекомендательный трек, который может появиться на этой позиции при продлении очереди.
	//
	// Значение 0 будет приходить на бэкенд в двух случаях:
	// 1. При отправке стейта клиентом, который знает про `message WaveQueue`, но не знает
	// про `live_playable_index`. Здесь требуется вычисление.
	// 2. При `playable_list.size == 1` в состоянии "с рекомендательными треками". Здесь
	// вычисление не имеет смысла, т.к. результат будет равен переданному значению и
	// значению по умолчанию.
	//
	// У треков из `playable_list` следует, по возможности, передавать `batch_id`
	// (см. [TrackInfo.batch_id]).
	//
	// int32 (вместо uint32) чтобы можно было задать -1, когда `playable_list` пустой.
	LivePlayableIndex int32 `protobuf:"varint,2,opt,name=live_playable_index,json=livePlayableIndex,proto3" json:"live_playable_index,omitempty"`
	// Параметры сущностей для смешанной трековой очереди.
	//
	// Волновая очередь by design становится смешанной и забирает под себя все COMMON очереди,
	// т.к. они по функциональности становятся её подмножеством и держать их отдельно
	// смысл пропадает.
	EntityOptions *PlayerQueue_Queue_WaveQueue_EntityOptions `protobuf:"bytes,3,opt,name=entity_options,json=entityOptions,proto3" json:"entity_options,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue) Reset() {
	*x = PlayerQueue_Queue_WaveQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *PlayerQueue_Queue_WaveQueue) GetRecommendedPlayableList() []*Playable {
	if x != nil {
		return x.RecommendedPlayableList
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue) GetLivePlayableIndex() int32 {
	if x != nil {
		return x.LivePlayableIndex
	}
	return 0
}

func (x *PlayerQueue_Queue_WaveQueue) GetEntityOptions() *PlayerQueue_Queue_WaveQueue_EntityOptions {
	if x != nil {
		return x.EntityOptions
	}
	return nil
}

// Поток нейромузыки. Состоит из одного [Playable.PlayableType.INFINITE]
type PlayerQueue_Queue_GenerativeQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор потока
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlayerQueue_Queue_GenerativeQueue) Reset() {
	*x = PlayerQueue_Queue_GenerativeQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_GenerativeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_GenerativeQueue) ProtoMessage() {}

func (x *PlayerQueue_Queue_GenerativeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_GenerativeQueue.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_GenerativeQueue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *PlayerQueue_Queue_GenerativeQueue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Поток ФМ-радио. Состоит из одного [Playable.PlayableType.INFINITE]
type PlayerQueue_Queue_FmRadioQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор потока
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlayerQueue_Queue_FmRadioQueue) Reset() {
	*x = PlayerQueue_Queue_FmRadioQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_FmRadioQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_FmRadioQueue) ProtoMessage() {}

func (x *PlayerQueue_Queue_FmRadioQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_FmRadioQueue.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_FmRadioQueue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *PlayerQueue_Queue_FmRadioQueue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Рекомендательная очередь видео-клипов. Состоит из [Playable.PlayableTypeVIDEO_CLIP]
type PlayerQueue_Queue_VideoWaveQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор очереди. Это произвольная строка, не имеющая какой-то строгой
	// структуры или связи с БД на бэкенде. Значение может быть "default", "other",
	// "search:${clipId}", "${albumId}".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlayerQueue_Queue_VideoWaveQueue) Reset() {
	*x = PlayerQueue_Queue_VideoWaveQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_VideoWaveQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_VideoWaveQueue) ProtoMessage() {}

func (x *PlayerQueue_Queue_VideoWaveQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_VideoWaveQueue.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_VideoWaveQueue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *PlayerQueue_Queue_VideoWaveQueue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Очередь треков с утройства [Playable.PlayableType.LOCAL_TRACK]. Такую очередь нельзя
// перенести через Юнисон на другое устройство, но можно отобазить простейший пульт.
// Локальные треки не могут быть перемешаны с обычными треками [Playable.PlayableType.TRACK].
type PlayerQueue_Queue_LocalTracksQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerQueue_Queue_LocalTracksQueue) Reset() {
	*x = PlayerQueue_Queue_LocalTracksQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_LocalTracksQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_LocalTracksQueue) ProtoMessage() {}

func (x *PlayerQueue_Queue_LocalTracksQueue) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_LocalTracksQueue.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_LocalTracksQueue) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 4}
}

type PlayerQueue_Queue_WaveQueue_EntityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Если в рамках очереди были запрошены рекомендательные треки, то в этом поле будет
	// содержаться сущность с идентификатором rotor-сессии, который никогда не изменится
	// для данной конкретной очереди.
	// Т.е. однажды запросив рекомендательные треки, у очереди появляется [WaveSession],
	// к которой относятся все рекомендованные треки, которые есть в этой очереди.
	// Рекомендованных треков, которые относились бы сразу к нескольким [WaveSession],
	// в рамках одной очереди быть не может.
	//
	// Если поле WaveSession задано, то очередь будет бесконечно достраиваться из этой
	// rotor-сессии и ни из какой другой. До тех пор пока поле не задано, достраиваться
	// очередь не может.
	WaveEntityOptional *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession `protobuf:"bytes,1,opt,name=wave_entity_optional,json=waveEntityOptional,proto3" json:"wave_entity_optional,omitempty"`
	// Таблица контекстов/сущностей очереди. Для оптимизации объёма стейта.
	// Чтобы задать контекст для конкретного playable, нужно внутри playable указать
	// ключ из этой таблицы. Таким образом, повторяющиеся контексты не раздуют стейт.
	//
	// См. [Playable.TrackInfo.track_source_key]
	TrackSources []*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey `protobuf:"bytes,2,rep,name=track_sources,json=trackSources,proto3" json:"track_sources,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions) GetWaveEntityOptional() *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession {
	if x != nil {
		return x.WaveEntityOptional
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions) GetTrackSources() []*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey {
	if x != nil {
		return x.TrackSources
	}
	return nil
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор rotor-сессии.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ключ для доступа к сущности в таблице. Должен быть уникальным в рамках таблицы.
	// Стабильность не требуется, т.е. можно при каждой отправке стейта клиентом
	// генерировать ключи заново. Но в рамках одного стейта должно всё быть
	// консистентно, т.е. плеяблы должны содержать в себе корректные ключи.
	//
	// См. [Playable.TrackInfo.track_source_key]
	Key uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to TrackSource:
	//
	//	*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_WaveSource
	//	*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_PhonotekaSource
	TrackSource isPlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_TrackSource `protobuf_oneof:"track_source"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (m *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) GetTrackSource() isPlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_TrackSource {
	if m != nil {
		return m.TrackSource
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) GetWaveSource() *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource {
	if x, ok := x.GetTrackSource().(*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_WaveSource); ok {
		return x.WaveSource
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey) GetPhonotekaSource() *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource {
	if x, ok := x.GetTrackSource().(*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_PhonotekaSource); ok {
		return x.PhonotekaSource
	}
	return nil
}

type isPlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_TrackSource interface {
	isPlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_TrackSource()
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_WaveSource struct {
	WaveSource *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource `protobuf:"bytes,2,opt,name=wave_source,json=waveSource,proto3,oneof"`
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_PhonotekaSource struct {
	PhonotekaSource *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource `protobuf:"bytes,3,opt,name=phonoteka_source,json=phonotekaSource,proto3,oneof"`
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_WaveSource) isPlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_TrackSource() {
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_PhonotekaSource) isPlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_TrackSource() {
}

// Пустой message, чтобы поле [Playable.TrackInfo.track_source_key] было не
// опциональным. А также на случай возможного расширения, если нужно будет
// поддержать треки из нескольких сессий в рамках одной очереди.
//
// В списке [WaveQueue.track_sources] может быть не более одного [WaveSource].
//
// Если [Playable.TrackInfo.track_source_key] указывает на [WaveSource], то
// это значит, что трек был получен из rotor-сессии [WaveSession].
type PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 2}
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор сущности - источника, к которому трек принадлежал до попадания
	// в очередь [WaveQueue].
	//
	// Types that are assignable to Id:
	//
	//	*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_ArtistId
	//	*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_PlaylistId
	//	*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_AlbumId
	Id isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id `protobuf_oneof:"id"`
	// Контекст воспроизведения.
	EntityContext PlayerQueue_EntityContext `protobuf:"varint,1,opt,name=entity_context,json=entityContext,proto3,enum=ynison_state.PlayerQueue_EntityContext" json:"entity_context,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 3}
}

func (m *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) GetId() isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) GetArtistId() *PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId {
	if x, ok := x.GetId().(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_ArtistId); ok {
		return x.ArtistId
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) GetPlaylistId() *PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId {
	if x, ok := x.GetId().(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_PlaylistId); ok {
		return x.PlaylistId
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) GetAlbumId() *PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId {
	if x, ok := x.GetId().(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_AlbumId); ok {
		return x.AlbumId
	}
	return nil
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource) GetEntityContext() PlayerQueue_EntityContext {
	if x != nil {
		return x.EntityContext
	}
	return PlayerQueue_BASED_ON_ENTITY_BY_DEFAULT
}

type isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id interface {
	isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id()
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_ArtistId struct {
	ArtistId *PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId `protobuf:"bytes,2,opt,name=artist_id,json=artistId,proto3,oneof"`
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_PlaylistId struct {
	PlaylistId *PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId `protobuf:"bytes,3,opt,name=playlist_id,json=playlistId,proto3,oneof"`
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_AlbumId struct {
	AlbumId *PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId `protobuf:"bytes,4,opt,name=album_id,json=albumId,proto3,oneof"`
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_ArtistId) isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id() {
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_PlaylistId) isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id() {
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_AlbumId) isPlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_Id() {
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор исполнителя.
	// Почему строковый - смотри [PhonotekaSource.AlbumId]
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 4}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор плейлиста. Строковый, потому что идёт процесс отказа от
	// owner:kind. См. MUSICBACKEND-12592
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 5}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор альбома. Идентификатор мог бы быть числовым, но по историческим
	// причинам он строковый и на бэкенде, и на клиентах. Раньше строка нужна была
	// для ugc. Можно было бы в будущем рассмотреть переход на числовой идентификатор.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId) Reset() {
	*x = PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId) ProtoMessage() {}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId.ProtoReflect.Descriptor instead.
func (*PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 0, 0, 0, 6}
}

func (x *PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Для entity_type = RADIO(4)
// Информация о волновой очереди теперь находится
// в [WaveQueue.EntityOptions.wave_entity_optional].
type PlayerQueue_PlayerQueueOptions_RadioOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *PlayerQueue_PlayerQueueOptions_RadioOptions) Reset() {
	*x = PlayerQueue_PlayerQueueOptions_RadioOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_queue_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerQueue_PlayerQueueOptions_RadioOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueue_PlayerQueueOptions_RadioOptions) ProtoMessage() {}

func (x *PlayerQueue_PlayerQueueOptions_RadioOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_queue_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueue_PlayerQueueOptions_RadioOptions.ProtoReflect.Descriptor instead.
func (*PlayerQueue_PlayerQueueOptions_RadioOptions) Descriptor() ([]byte, []int) {
	return file_ynisonstate_queue_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *PlayerQueue_PlayerQueueOptions_RadioOptions) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

var File_ynisonstate_queue_proto protoreflect.FileDescriptor

var file_ynisonstate_queue_proto_rawDesc = []byte{
	0x0a, 0x17, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1a, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x1a, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x10, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52,
	0x0f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x52, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x17, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x17,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x15, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0xe9, 0x0e, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x5c, 0x0a, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x66, 0x6d,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x46, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x5a, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x60, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0xa0,
	0x0a, 0x0a, 0x09, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x19,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x5e, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0xae, 0x08, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x75, 0x0a, 0x14, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x77, 0x61, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x0b, 0x57, 0x61,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x93, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x65, 0x0a, 0x0b, 0x77, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x57, 0x61, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x61,
	0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x6e,
	0x6f, 0x74, 0x65, 0x6b, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x6f, 0x74, 0x65, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x68, 0x6f, 0x6e, 0x6f, 0x74, 0x65, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x0c,
	0x0a, 0x0a, 0x57, 0x61, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x8d, 0x03, 0x0a,
	0x0f, 0x50, 0x68, 0x6f, 0x6e, 0x6f, 0x74, 0x65, 0x6b, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x5f, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x65, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x61, 0x76, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x1a, 0x1a, 0x0a, 0x08,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x1c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x19, 0x0a, 0x07, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x1a, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x1e, 0x0a, 0x0c, 0x46, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x1a, 0x20, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x61, 0x76,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x12, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x77, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x1a, 0xb4, 0x01, 0x0a, 0x12,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x6e, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2d, 0x0a, 0x0c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x4c, 0x42, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x4d, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x57, 0x41, 0x56, 0x45, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x09, 0x1a,
	0x02, 0x18, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x4b, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x55, 0x53,
	0x49, 0x43, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54,
	0x5f, 0x4d, 0x59, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c,
	0x49, 0x41, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x57, 0x41, 0x56, 0x45, 0x10, 0x07, 0x22,
	0x9d, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x6e,
	0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x22,
	0x34, 0x0a, 0x07, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x66, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a, 0x41, 0x61, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x2d, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ynisonstate_queue_proto_rawDescOnce sync.Once
	file_ynisonstate_queue_proto_rawDescData = file_ynisonstate_queue_proto_rawDesc
)

func file_ynisonstate_queue_proto_rawDescGZIP() []byte {
	file_ynisonstate_queue_proto_rawDescOnce.Do(func() {
		file_ynisonstate_queue_proto_rawDescData = protoimpl.X.CompressGZIP(file_ynisonstate_queue_proto_rawDescData)
	})
	return file_ynisonstate_queue_proto_rawDescData
}

var file_ynisonstate_queue_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ynisonstate_queue_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ynisonstate_queue_proto_goTypes = []interface{}{
	(PlayerQueue_EntityType)(0),                                          // 0: ynison_state.PlayerQueue.EntityType
	(PlayerQueue_EntityContext)(0),                                       // 1: ynison_state.PlayerQueue.EntityContext
	(PlayerStateOptions_RepeatMode)(0),                                   // 2: ynison_state.PlayerStateOptions.RepeatMode
	(*PlayerQueue)(nil),                                                  // 3: ynison_state.PlayerQueue
	(*PlayerStateOptions)(nil),                                           // 4: ynison_state.PlayerStateOptions
	(*Shuffle)(nil),                                                      // 5: ynison_state.Shuffle
	(*PlayerQueue_Queue)(nil),                                            // 6: ynison_state.PlayerQueue.Queue
	(*PlayerQueue_InitialEntity)(nil),                                    // 7: ynison_state.PlayerQueue.InitialEntity
	(*PlayerQueue_PlayerQueueOptions)(nil),                               // 8: ynison_state.PlayerQueue.PlayerQueueOptions
	(*PlayerQueue_Queue_WaveQueue)(nil),                                  // 9: ynison_state.PlayerQueue.Queue.WaveQueue
	(*PlayerQueue_Queue_GenerativeQueue)(nil),                            // 10: ynison_state.PlayerQueue.Queue.GenerativeQueue
	(*PlayerQueue_Queue_FmRadioQueue)(nil),                               // 11: ynison_state.PlayerQueue.Queue.FmRadioQueue
	(*PlayerQueue_Queue_VideoWaveQueue)(nil),                             // 12: ynison_state.PlayerQueue.Queue.VideoWaveQueue
	(*PlayerQueue_Queue_LocalTracksQueue)(nil),                           // 13: ynison_state.PlayerQueue.Queue.LocalTracksQueue
	(*PlayerQueue_Queue_WaveQueue_EntityOptions)(nil),                    // 14: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession)(nil),        // 15: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.WaveSession
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey)(nil), // 16: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.TrackSourceWithKey
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource)(nil),         // 17: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.WaveSource
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource)(nil),    // 18: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PhonotekaSource
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId)(nil),           // 19: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.ArtistId
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId)(nil),         // 20: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PlaylistId
	(*PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId)(nil),            // 21: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.AlbumId
	(*PlayerQueue_PlayerQueueOptions_RadioOptions)(nil),                  // 22: ynison_state.PlayerQueue.PlayerQueueOptions.RadioOptions
	(*Playable)(nil),                                                     // 23: ynison_state.Playable
	(*UpdateVersion)(nil),                                    // 24: ynison_state.UpdateVersion
	(*wrapperspb.StringValue)(nil),                                       // 25: google.protobuf.StringValue
}
var file_ynisonstate_queue_proto_depIdxs = []int32{
	0,  // 0: ynison_state.PlayerQueue.entity_type:type_name -> ynison_state.PlayerQueue.EntityType
	6,  // 1: ynison_state.PlayerQueue.queue:type_name -> ynison_state.PlayerQueue.Queue
	23, // 2: ynison_state.PlayerQueue.playable_list:type_name -> ynison_state.Playable
	4,  // 3: ynison_state.PlayerQueue.options:type_name -> ynison_state.PlayerStateOptions
	24, // 4: ynison_state.PlayerQueue.version:type_name -> ynison_state.UpdateVersion
	5,  // 5: ynison_state.PlayerQueue.shuffle_optional:type_name -> ynison_state.Shuffle
	1,  // 6: ynison_state.PlayerQueue.entity_context:type_name -> ynison_state.PlayerQueue.EntityContext
	25, // 7: ynison_state.PlayerQueue.from_optional:type_name -> google.protobuf.StringValue
	7,  // 8: ynison_state.PlayerQueue.initial_entity_optional:type_name -> ynison_state.PlayerQueue.InitialEntity
	8,  // 9: ynison_state.PlayerQueue.adding_options_optional:type_name -> ynison_state.PlayerQueue.PlayerQueueOptions
	2,  // 10: ynison_state.PlayerStateOptions.repeat_mode:type_name -> ynison_state.PlayerStateOptions.RepeatMode
	9,  // 11: ynison_state.PlayerQueue.Queue.wave_queue:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue
	10, // 12: ynison_state.PlayerQueue.Queue.generative_queue:type_name -> ynison_state.PlayerQueue.Queue.GenerativeQueue
	11, // 13: ynison_state.PlayerQueue.Queue.fm_radio_queue:type_name -> ynison_state.PlayerQueue.Queue.FmRadioQueue
	12, // 14: ynison_state.PlayerQueue.Queue.video_wave_queue:type_name -> ynison_state.PlayerQueue.Queue.VideoWaveQueue
	13, // 15: ynison_state.PlayerQueue.Queue.local_tracks_queue:type_name -> ynison_state.PlayerQueue.Queue.LocalTracksQueue
	0,  // 16: ynison_state.PlayerQueue.InitialEntity.entity_type:type_name -> ynison_state.PlayerQueue.EntityType
	22, // 17: ynison_state.PlayerQueue.PlayerQueueOptions.radio_options:type_name -> ynison_state.PlayerQueue.PlayerQueueOptions.RadioOptions
	23, // 18: ynison_state.PlayerQueue.Queue.WaveQueue.recommended_playable_list:type_name -> ynison_state.Playable
	14, // 19: ynison_state.PlayerQueue.Queue.WaveQueue.entity_options:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions
	15, // 20: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.wave_entity_optional:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.WaveSession
	16, // 21: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.track_sources:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.TrackSourceWithKey
	17, // 22: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.TrackSourceWithKey.wave_source:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.WaveSource
	18, // 23: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.TrackSourceWithKey.phonoteka_source:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PhonotekaSource
	19, // 24: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PhonotekaSource.artist_id:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.ArtistId
	20, // 25: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PhonotekaSource.playlist_id:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PlaylistId
	21, // 26: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PhonotekaSource.album_id:type_name -> ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.AlbumId
	1,  // 27: ynison_state.PlayerQueue.Queue.WaveQueue.EntityOptions.PhonotekaSource.entity_context:type_name -> ynison_state.PlayerQueue.EntityContext
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_ynisonstate_queue_proto_init() }
func file_ynisonstate_queue_proto_init() {
	if File_ynisonstate_queue_proto != nil {
		return
	}
	file_ynisonstate_playable_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ynisonstate_queue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shuffle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_InitialEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_PlayerQueueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_GenerativeQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_FmRadioQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_VideoWaveQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_LocalTracksQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_WaveSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_ArtistId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_PlaylistId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_Queue_WaveQueue_EntityOptions_AlbumId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_queue_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerQueue_PlayerQueueOptions_RadioOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ynisonstate_queue_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PlayerQueue_Queue_WaveQueue_)(nil),
		(*PlayerQueue_Queue_GenerativeQueue_)(nil),
		(*PlayerQueue_Queue_FmRadioQueue_)(nil),
		(*PlayerQueue_Queue_VideoWaveQueue_)(nil),
		(*PlayerQueue_Queue_LocalTracksQueue_)(nil),
	}
	file_ynisonstate_queue_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*PlayerQueue_PlayerQueueOptions_RadioOptions_)(nil),
	}
	file_ynisonstate_queue_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_WaveSource)(nil),
		(*PlayerQueue_Queue_WaveQueue_EntityOptions_TrackSourceWithKey_PhonotekaSource)(nil),
	}
	file_ynisonstate_queue_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_ArtistId)(nil),
		(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_PlaylistId)(nil),
		(*PlayerQueue_Queue_WaveQueue_EntityOptions_PhonotekaSource_AlbumId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ynisonstate_queue_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ynisonstate_queue_proto_goTypes,
		DependencyIndexes: file_ynisonstate_queue_proto_depIdxs,
		EnumInfos:         file_ynisonstate_queue_proto_enumTypes,
		MessageInfos:      file_ynisonstate_queue_proto_msgTypes,
	}.Build()
	File_ynisonstate_queue_proto = out.File
	file_ynisonstate_queue_proto_rawDesc = nil
	file_ynisonstate_queue_proto_goTypes = nil
	file_ynisonstate_queue_proto_depIdxs = nil
}
