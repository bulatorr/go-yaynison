// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: ynisonstate/device.proto

package ynisonstate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Устройство.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Информация об устройстве.
	Info *DeviceInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// Громкость. Устаревшее значение, смотри [volume_info].
	//
	// Deprecated: Do not use.
	Volume float64 `protobuf:"fixed64,2,opt,name=volume,proto3" json:"volume,omitempty"`
	// Настройки доступности.
	Capabilities *DeviceCapabilities `protobuf:"bytes,3,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Информация о сессии. Ожидаемо уникальна для каждого отдельно инициализированного подключения.
	Session *Session `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	// Оффлайн ли устройство (не подключено к юнисону на данный момент).
	IsOffline bool `protobuf:"varint,5,opt,name=is_offline,json=isOffline,proto3" json:"is_offline,omitempty"`
	// Состояние громкости устройства вместе с информацией о последнем устройстве, изменившим её.
	VolumeInfo *DeviceVolume `protobuf:"bytes,6,opt,name=volume_info,json=volumeInfo,proto3" json:"volume_info,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_ynisonstate_device_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Deprecated: Do not use.
func (x *Device) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Device) GetCapabilities() *DeviceCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Device) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Device) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

func (x *Device) GetVolumeInfo() *DeviceVolume {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

type DeviceVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Громкость. Значения в интервале [0.0; 1.0]
	//
	// Значение тесно связано с [DeviceCapabilities.volume_granularity].
	// Ожидается округление мантиссы до 4 знаков при делении 1.0 на число шагов шкалы громкости
	//
	// Пример:
	// * шкала в 16 делений: [0.0625, 0.125, ..., 0.9375, 1.00]
	// * шкала в 13 делений: [0.0769, 0.1538, ..., 0.9230, 0.9997]
	//
	// Обратные вычисления:
	// * шкала в 16 делений: round(0.9375 * 16) = 15 (15.0)
	// * шкала в 13 делений: round(0.9230 * 13) = 12 (11.9999)
	Volume float64 `protobuf:"fixed64,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Версия последнего изменения громкости устройства.
	Version *UpdateVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeviceVolume) Reset() {
	*x = DeviceVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVolume) ProtoMessage() {}

func (x *DeviceVolume) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVolume.ProtoReflect.Descriptor instead.
func (*DeviceVolume) Descriptor() ([]byte, []int) {
	return file_ynisonstate_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceVolume) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *DeviceVolume) GetVersion() *UpdateVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

// Информация об устройстве.
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device id устройства.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Название устройства.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Тип устройства.
	Type DeviceType `protobuf:"varint,3,opt,name=type,proto3,enum=ynison_state.DeviceType" json:"type,omitempty"`
	// Информация о клиентском приложении подключенного устройства
	AppName string `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// Информация о версии клиентского приложения подключенного устройства
	AppVersion string `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_ynisonstate_device_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DeviceInfo) GetType() DeviceType {
	if x != nil {
		return x.Type
	}
	return DeviceType_UNSPECIFIED
}

func (x *DeviceInfo) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeviceInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

// Настройки доступности устройства.
type DeviceCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Может ли устройство быть активным и проигрывать сущности.
	CanBePlayer bool `protobuf:"varint,1,opt,name=can_be_player,json=canBePlayer,proto3" json:"can_be_player,omitempty"`
	// Может ли устройство быть пультом.
	CanBeRemoteController bool `protobuf:"varint,2,opt,name=can_be_remote_controller,json=canBeRemoteController,proto3" json:"can_be_remote_controller,omitempty"`
	// Максимальное количество делений на шкале громкости для управления этим устройством:
	// * 0 - если устройство не поддерживает удаленный контроль громкости
	// * N - если устройство поддерживает удаленный контроль громкости
	//
	// Допустимы значения в диапазоне [0, 1000]
	// Девайсы в режиме пульта обязуются рисовать контрол управления равный N (либо такой, которому пропорционально заданное N)
	//
	// Пример: Телевизор поддерживает 20 делений
	// * Телефон может нарисовать шкалу на 20 делений: [0.05, 0.10, ..., 0.95, 1.00]
	// * Телефон может нарисовать шкалу на 10 делений: [0.10, 0.20, ..., 0.90, 1.00]
	// * Телефон НЕ может рисовать шкалу на 16 делений: [0.0625, 0.125, ..., 0.9375, 1.00]
	// * Телефон НЕ может рисовать шкалу на 100 делений: [0.01, 0.02, ..., 0.99, 1.00]
	//
	// Если не соблюдать эти требования, телевизор не сможет применить значение корректно.
	// * больший шаг может привести к ошибке округления и лишнему (ответному) сообщению от приемника
	// * меньшей шаг может привести к неприменению громкостей, округляющихся к одному значению
	VolumeGranularity uint32 `protobuf:"varint,3,opt,name=volume_granularity,json=volumeGranularity,proto3" json:"volume_granularity,omitempty"`
}

func (x *DeviceCapabilities) Reset() {
	*x = DeviceCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCapabilities) ProtoMessage() {}

func (x *DeviceCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCapabilities.ProtoReflect.Descriptor instead.
func (*DeviceCapabilities) Descriptor() ([]byte, []int) {
	return file_ynisonstate_device_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceCapabilities) GetCanBePlayer() bool {
	if x != nil {
		return x.CanBePlayer
	}
	return false
}

func (x *DeviceCapabilities) GetCanBeRemoteController() bool {
	if x != nil {
		return x.CanBeRemoteController
	}
	return false
}

func (x *DeviceCapabilities) GetVolumeGranularity() uint32 {
	if x != nil {
		return x.VolumeGranularity
	}
	return 0
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Сервер сгенерирует случайное значение самостоятельно.
	// Клиент может заполнить это значение самостоятельно при UpdateFullState,
	// в таком случае сервер использует переданное значение.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ynisonstate_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_ynisonstate_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_ynisonstate_device_proto_rawDescGZIP(), []int{4}
}

func (x *Session) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_ynisonstate_device_proto protoreflect.FileDescriptor

var file_ynisonstate_device_proto_rawDesc = []byte{
	0x0a, 0x18, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x79, 0x6e, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x20, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x6e, 0x69, 0x73,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x6e, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6e, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x42,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x5f, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x42, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x12, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x19, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x42, 0x67, 0x0a, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79,
	0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a,
	0x42, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72,
	0x75, 0x2f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x2d, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x69,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x6e, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ynisonstate_device_proto_rawDescOnce sync.Once
	file_ynisonstate_device_proto_rawDescData = file_ynisonstate_device_proto_rawDesc
)

func file_ynisonstate_device_proto_rawDescGZIP() []byte {
	file_ynisonstate_device_proto_rawDescOnce.Do(func() {
		file_ynisonstate_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_ynisonstate_device_proto_rawDescData)
	})
	return file_ynisonstate_device_proto_rawDescData
}

var file_ynisonstate_device_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ynisonstate_device_proto_goTypes = []interface{}{
	(*Device)(nil),             // 0: ynison_state.Device
	(*DeviceVolume)(nil),       // 1: ynison_state.DeviceVolume
	(*DeviceInfo)(nil),         // 2: ynison_state.DeviceInfo
	(*DeviceCapabilities)(nil), // 3: ynison_state.DeviceCapabilities
	(*Session)(nil),            // 4: ynison_state.Session
	(*UpdateVersion)(nil),      // 5: ynison_state.UpdateVersion
	(DeviceType)(0),            // 6: ynison_state.DeviceType
}
var file_ynisonstate_device_proto_depIdxs = []int32{
	2, // 0: ynison_state.Device.info:type_name -> ynison_state.DeviceInfo
	3, // 1: ynison_state.Device.capabilities:type_name -> ynison_state.DeviceCapabilities
	4, // 2: ynison_state.Device.session:type_name -> ynison_state.Session
	1, // 3: ynison_state.Device.volume_info:type_name -> ynison_state.DeviceVolume
	5, // 4: ynison_state.DeviceVolume.version:type_name -> ynison_state.UpdateVersion
	6, // 5: ynison_state.DeviceInfo.type:type_name -> ynison_state.DeviceType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ynisonstate_device_proto_init() }
func file_ynisonstate_device_proto_init() {
	if File_ynisonstate_device_proto != nil {
		return
	}
	file_ynisonstate_update_version_proto_init()
	file_ynisonstate_device_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ynisonstate_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ynisonstate_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ynisonstate_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ynisonstate_device_proto_goTypes,
		DependencyIndexes: file_ynisonstate_device_proto_depIdxs,
		MessageInfos:      file_ynisonstate_device_proto_msgTypes,
	}.Build()
	File_ynisonstate_device_proto = out.File
	file_ynisonstate_device_proto_rawDesc = nil
	file_ynisonstate_device_proto_goTypes = nil
	file_ynisonstate_device_proto_depIdxs = nil
}
